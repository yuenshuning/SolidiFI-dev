==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ERC20Token
Function name: withdraw_intou9()
PC address: 2216
Estimated Gas Usage: 1103 - 1388
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:96

require(now > lockTime_intou9[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x70000010000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_intou9(), txdata: 0x1cbdc87d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ERC20Token
Function name: withdraw_intou13()
PC address: 3186
Estimated Gas Usage: 1125 - 1410
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:206

require(now > lockTime_intou13[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000120001000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AsseteGram
Function name: withdraw_intou9()
PC address: 3431
Estimated Gas Usage: 1081 - 1366
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:96

require(now > lockTime_intou9[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_intou9(), txdata: 0x1cbdc87d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ERC20Token
Function name: withdraw_intou25()
PC address: 3442
Estimated Gas Usage: 1146 - 1431
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:107

require(now > lockTime_intou25[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x80100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Token
Function name: transfer_intou14(address,uint256)
PC address: 4062
Estimated Gas Usage: 13202 - 54148
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:67

balances_intou14[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x240108e14302012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000180200101000408020401080000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Token
Function name: transfer_intou14(address,uint256)
PC address: 4142
Estimated Gas Usage: 13202 - 54148
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:68

balances_intou14[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x240108e14302012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000180200101000408020401080000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Token
Function name: transfer_intou14(address,uint256)
PC address: 4218
Estimated Gas Usage: 13202 - 54148
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:69

balances_intou14[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x52a80280008002007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou26(address,uint256)
PC address: 4325
Estimated Gas Usage: 13159 - 54105
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:221

balances_intou26[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2980420000009b804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000000000000000000000000000000000000000000000020400024002010000010101010101010100000000000000009e0000000102, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou26(address,uint256)
PC address: 4406
Estimated Gas Usage: 13159 - 54105
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:222

balances_intou26[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2980420000009b804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000000000000000000000000000000000000000000000020400024002010000010101010101010100000000000000009e0000000102, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Token
Function name: transfer_intou30(address,uint256)
PC address: 4464
Estimated Gas Usage: 13180 - 54126
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:76

balances_intou30[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x220231513a16018e9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000140010108200020401010200000000000000000000000000000000100000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou26(address,uint256)
PC address: 4483
Estimated Gas Usage: 13159 - 54105
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:223

balances_intou26[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x3000000020800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Token
Function name: transfer_intou30(address,uint256)
PC address: 4545
Estimated Gas Usage: 13180 - 54126
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:77

balances_intou30[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x220231513a16018e9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000140010108200020401010200000000000000000000000000000000100000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Token
Function name: transfer_intou30(address,uint256)
PC address: 4622
Estimated Gas Usage: 13180 - 54126
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:78

balances_intou30[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x42401000098202012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafe00000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AsseteGram
Function name: withdraw_intou13()
PC address: 4850
Estimated Gas Usage: 1102 - 1387
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:206

require(now > lockTime_intou13[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x3e000000000040208, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou38(address,uint256)
PC address: 5171
Estimated Gas Usage: 13159 - 54105
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:240

balances_intou38[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x104000a0400040401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000002004408002200008100101040001000000000000000000000000000020000201, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou38(address,uint256)
PC address: 5252
Estimated Gas Usage: 13159 - 54105
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:241

balances_intou38[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x104000a0400040401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000002004408002200008100101040001000000000000000000000000000020000201, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou38(address,uint256)
PC address: 5329
Estimated Gas Usage: 13159 - 54105
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:242

balances_intou38[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000030480, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer_intou38(address,uint256), txdata: 0x7daba891000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AsseteGram
Function name: withdraw_intou25()
PC address: 5430
Estimated Gas Usage: 1125 - 1410
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:107

require(now > lockTime_intou25[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1010000100280213, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou14(address,uint256)
PC address: 6208
Estimated Gas Usage: 13246 - 54192
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:67

balances_intou14[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x524000000100a0013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000101100401000140021002100000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou14(address,uint256)
PC address: 6288
Estimated Gas Usage: 13246 - 54192
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:68

balances_intou14[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x524000000100a0013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000101100401000140021002100000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou14(address,uint256)
PC address: 6364
Estimated Gas Usage: 13246 - 54192
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:69

balances_intou14[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x810, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AsseteGram
Function name: withdraw_intou33()
PC address: 6531
Estimated Gas Usage: 1102 - 1387
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:259

require(now > lockTime_intou33[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x32001080000020018, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou30(address,uint256)
PC address: 6765
Estimated Gas Usage: 13224 - 54170
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:76

balances_intou30[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000620c1050008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000120042002100101020000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou30(address,uint256)
PC address: 6846
Estimated Gas Usage: 13224 - 54170
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:77

balances_intou30[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000620c1050008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000120042002100101020000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AsseteGram
Function name: transfer_intou30(address,uint256)
PC address: 6923
Estimated Gas Usage: 13224 - 54170
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Overflow-Underflow/buggy_32.sol:78

balances_intou30[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2010000004004a285, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



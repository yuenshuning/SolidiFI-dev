==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: callme_re_ent42()
PC address: 3241
Estimated Gas Usage: 7686 - 61967
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:140

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40ae747891a180294, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x517791b344f469d, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent42(), txdata: 0x0f7219b0, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: callme_re_ent35()
PC address: 3346
Estimated Gas Usage: 7708 - 61989
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:351

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x41ed78944a3f80085, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20800c0142039940, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent35(), txdata: 0x1578e01e, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: callme_re_ent14()
PC address: 3461
Estimated Gas Usage: 7641 - 61922
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:258

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x11049afaccf580206, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421000000001730bf, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent14(), txdata: 0x1abf48c0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: withdrawBalance_re_ent40()
PC address: 6360
Estimated Gas Usage: 7018 - 61679
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:367

msg.sender.call.value(userBalance_re_ent40[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000008002500000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BIGBOMBv2
Function name: withdrawBalance_re_ent40()
PC address: 6495
Estimated Gas Usage: 7018 - 61679
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:371

userBalance_re_ent40[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x300020000000108, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80030000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: withdrawBalance_re_ent26()
PC address: 8238
Estimated Gas Usage: 7041 - 61702
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:102

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x820000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3f200000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BIGBOMBv2
Function name: withdrawBalance_re_ent26()
PC address: 8373
Estimated Gas Usage: 7041 - 61702
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:106

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x22900100210000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x12000100000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: bug_re_ent27()
PC address: 8458
Estimated Gas Usage: 7746 - 62687
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:396

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10a61d603ab04008f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3d377c24f58800007, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent27(), txdata: 0x9128b348, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: withdraw_balances_re_ent8()
PC address: 9279
Estimated Gas Usage: 7043 - 61704
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:296

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x15000200000200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10040000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BIGBOMBv2
Function name: withdraw_balances_re_ent8()
PC address: 9410
Estimated Gas Usage: 7043 - 61704
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:298

balances_re_ent8[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000200008003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: bug_re_ent13()
PC address: 9496
Estimated Gas Usage: 7790 - 62731
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:425

msg.sender.call.value(1 ether)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x30de0b6bee5841002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001000020008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: bug_re_ent13()
PC address: 9496
Estimated Gas Usage: 7790 - 62731
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:425

msg.sender.call.value(1 ether)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2fc19ef9d3788006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x171444a033081fff6, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BIGBOMBv2
Function name: bug_re_ent13()
PC address: 9575
Estimated Gas Usage: 7790 - 62731
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:429

not_called_re_ent13 = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x26e13ae3ab648000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BIGBOMBv2
Function name: bug_re_ent13()
PC address: 9589
Estimated Gas Usage: 7790 - 62731
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:429

not_called_re_ent13 = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x26e13ae3ab648000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: buyTicket_re_ent9()
PC address: 11588
Estimated Gas Usage: 13564 - 88505
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:189

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000412, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: buyTicket_re_ent9()
PC address: 11641
Estimated Gas Usage: 13564 - 88505
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:189

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000412, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: buyTicket_re_ent9()
PC address: 11648
Estimated Gas Usage: 13564 - 88505
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:190

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000412, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: bug_re_ent20()
PC address: 12070
Estimated Gas Usage: 7811 - 62752
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:115

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x28a13733a7640002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x404372842424a7409, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent20(), txdata: 0xd8fa982f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BIGBOMBv2
Function name: withdraw_balances_re_ent1()
PC address: 12531
Estimated Gas Usage: 2034 - 36788
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:65

msg.sender.call.value(balances_re_ent1[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0116002008028, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800002007000100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: bug_re_ent41()
PC address: 12748
Estimated Gas Usage: 7766 - 62707
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:73

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1b60b8d5d5a40004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xe89e8a3c204db680, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent41(), txdata: 0xf9a1f3d9, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BIGBOMBv2
Function name: callme_re_ent7()
PC address: 13035
Estimated Gas Usage: 7749 - 62030
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:232

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x102cf0504c3c8004a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x50540d0fc030f7fa6, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent7(), txdata: 0xfef28f0b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BIGBOMBv2
Function name: findfourPercent(uint256)
PC address: 13108
Estimated Gas Usage: 1264 - 1359
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_38.sol:46

add(a,m)

--------------------
Initial State:

Account: [CREATOR], balance: 0x22320800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: findfourPercent(uint256), txdata: 0xd7de7323ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb4, value: 0x0



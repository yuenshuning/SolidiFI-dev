==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: callme_re_ent42()
PC address: 2592
Estimated Gas Usage: 7664 - 61945
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:85

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x155c5230541e80001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400800558f6109703, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent42(), txdata: 0x0f7219b0, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: callme_re_ent35()
PC address: 2697
Estimated Gas Usage: 7686 - 61967
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:45

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x227e2bd0cc518000b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x14180246003bda, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent35(), txdata: 0x1578e01e, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: callme_re_ent14()
PC address: 2802
Estimated Gas Usage: 7708 - 61989
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:355

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0xf0e72715629c004c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421789ce36907fbf4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent14(), txdata: 0x1abf48c0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: withdrawBalance_re_ent40()
PC address: 4710
Estimated Gas Usage: 7063 - 61724
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:55

msg.sender.call.value(userBalance_re_ent40[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x7, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40392468000ef, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: withdrawBalance_re_ent40()
PC address: 4845
Estimated Gas Usage: 7063 - 61724
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:59

userBalance_re_ent40[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000004201e1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: withdrawBalance_re_ent26()
PC address: 6507
Estimated Gas Usage: 7019 - 61680
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:210

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xfa00103, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: withdrawBalance_re_ent26()
PC address: 6642
Estimated Gas Usage: 7019 - 61680
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:214

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_re_ent27()
PC address: 6727
Estimated Gas Usage: 7724 - 62665
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:310

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0xde84cc027640002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400180802405b4ffe, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent27(), txdata: 0x9128b348, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: withdraw_balances_re_ent21()
PC address: 6880
Estimated Gas Usage: 7066 - 61727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:11

msg.sender.call.value(balances_re_ent21[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000210060, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4402000e71018, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent21(), txdata: 0x96c176f9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: withdraw_balances_re_ent21()
PC address: 7010
Estimated Gas Usage: 7066 - 61727
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:13

balances_re_ent21[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x132000040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent21(), txdata: 0x96c176f9, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: withdraw_balances_re_ent8()
PC address: 7631
Estimated Gas Usage: 7021 - 61682
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:394

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000009018a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000002000003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: withdraw_balances_re_ent8()
PC address: 7762
Estimated Gas Usage: 7021 - 61682
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:396

balances_re_ent8[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x20700600000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x54024226, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: bug_re_ent13()
PC address: 7848
Estimated Gas Usage: 7768 - 62709
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:327

msg.sender.call.value(1 ether)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c00000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5080054c005, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_re_ent13()
PC address: 7848
Estimated Gas Usage: 7768 - 62709
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:327

msg.sender.call.value(1 ether)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1be0e80402640002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x261c20a0190bbffe, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: bug_re_ent13()
PC address: 7927
Estimated Gas Usage: 7768 - 62709
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:331

not_called_re_ent13 = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x40ce4d1a3c0a05346, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: bug_re_ent13()
PC address: 7941
Estimated Gas Usage: 7768 - 62709
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:331

not_called_re_ent13 = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x40ce4d1a3c0a05346, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: buyTicket_re_ent9()
PC address: 8666
Estimated Gas Usage: 13630 - 88571
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:171

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100020000020404, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: buyTicket_re_ent9()
PC address: 8719
Estimated Gas Usage: 13630 - 88571
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:171

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100020000020404, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: buyTicket_re_ent9()
PC address: 8726
Estimated Gas Usage: 13630 - 88571
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:172

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100020000020404, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: withdrawBalance_re_ent33()
PC address: 9150
Estimated Gas Usage: 7040 - 61701
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:66

msg.sender.call.value(userBalance_re_ent33[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40c80100000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x18001a2acc22509b7, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: withdrawBalance_re_ent33()
PC address: 9285
Estimated Gas Usage: 7040 - 61701
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:70

userBalance_re_ent33[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x30010000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xba120223b8800401, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_re_ent20()
PC address: 10150
Estimated Gas Usage: 7789 - 62730
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:224

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0xde808a547640002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5021c080a400b6cfd, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent20(), txdata: 0xd8fa982f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountWallet
Function name: withdraw_balances_re_ent1()
PC address: 10518
Estimated Gas Usage: 7042 - 61703
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:292

msg.sender.call.value(balances_re_ent1[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x8cc13fc82000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountWallet
Function name: withdraw_balances_re_ent1()
PC address: 10649
Estimated Gas Usage: 7042 - 61703
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:294

balances_re_ent1[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80a00001a00b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_re_ent41()
PC address: 10764
Estimated Gas Usage: 7766 - 62707
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:300

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0xfe162bb8d640002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3c08ba004381004ff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: bug_re_ent41(), txdata: 0xf9a1f3d9, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: callme_re_ent7()
PC address: 11051
Estimated Gas Usage: 7749 - 62030
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_7.sol:281

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x17cd394054a780016, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4250038236003dc2c, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000
Caller: [ATTACKER], function: callme_re_ent7(), txdata: 0xfef28f0b, value: 0x0



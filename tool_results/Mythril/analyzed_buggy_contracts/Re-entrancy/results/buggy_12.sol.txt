==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC223Token
Function name: withdrawBalance_re_ent26()
PC address: 1570
Estimated Gas Usage: 7135 - 62079
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:316

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4200000000f9956d3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000040009, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC223Token
Function name: withdrawBalance_re_ent26()
PC address: 1705
Estimated Gas Usage: 7135 - 62079
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:320

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x18000080107bb07, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x14808000000080201, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC223Token
Function name: withdrawFunds_re_ent3(uint256)
PC address: 2011
Estimated Gas Usage: 7997 - 62941
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:197

msg.sender.call.value(_weiToWithdraw)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x38832, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC223Token
Function name: withdrawFunds_re_ent3(uint256)
PC address: 2147
Estimated Gas Usage: 7997 - 62941
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:199

balances_re_ent3[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x50003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC223Token
Function name: withdrawFunds_re_ent3(uint256)
PC address: 2154
Estimated Gas Usage: 7997 - 62941
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:199

balances_re_ent3[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x50003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC223Token
Function name: buyTicket_re_ent9()
PC address: 3260
Estimated Gas Usage: 13636 - 88860
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:208

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC223Token
Function name: buyTicket_re_ent9()
PC address: 3313
Estimated Gas Usage: 13636 - 88860
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:208

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC223Token
Function name: buyTicket_re_ent9()
PC address: 3320
Estimated Gas Usage: 13636 - 88860
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_12.sol:209

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0



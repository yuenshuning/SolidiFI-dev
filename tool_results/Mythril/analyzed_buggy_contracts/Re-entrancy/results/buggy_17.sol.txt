==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AZT
Function name: constructor
PC address: 1018
Estimated Gas Usage: 149639 - 622789
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:357

now + 1 * 1 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AZT
Function name: frozenAddresses(uint256)
PC address: 5788
Estimated Gas Usage: 1157 - 1252
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:316

address[] public frozenAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x43, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: frozenAddresses(uint256), txdata: 0x5506ed440000000000010102010404010000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AZT
Function name: withdraw_balances_re_ent8()
PC address: 9340
Estimated Gas Usage: 7065 - 61726
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:367

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4080c200000681, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x212a000000000401, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AZT
Function name: withdraw_balances_re_ent8()
PC address: 9471
Estimated Gas Usage: 7065 - 61726
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:369

balances_re_ent8[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x802000080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AZT
Function name: buyTicket_re_ent9()
PC address: 10398
Estimated Gas Usage: 13564 - 88505
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:303

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0xed00000324c4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xae10000a66800001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AZT
Function name: buyTicket_re_ent9()
PC address: 10451
Estimated Gas Usage: 13564 - 88505
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:303

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0xed00000324c4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xae10000a66800001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AZT
Function name: buyTicket_re_ent9()
PC address: 10458
Estimated Gas Usage: 13564 - 88505
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:304

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0xed00000324c4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xae10000a66800001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AZT
Function name: withdrawBalance_re_ent33()
PC address: 10592
Estimated Gas Usage: 7084 - 61745
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:444

msg.sender.call.value(userBalance_re_ent33[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0xd60000050401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100c018822c4c2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AZT
Function name: withdraw_balances_re_ent1()
PC address: 11535
Estimated Gas Usage: 2057 - 36811
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:108

msg.sender.call.value(balances_re_ent1[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20008400300c3003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x24000000000608000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AZT
Function name: withdraw_balances_re_ent1()
PC address: 11666
Estimated Gas Usage: 2057 - 36811
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_17.sol:110

balances_re_ent1[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x12840488102004401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x413, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0



==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdrawBalance_re_ent40()
PC address: 5630
Estimated Gas Usage: 7136 - 62080
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:414

msg.sender.call.value(userBalance_re_ent40[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x41210000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x14400024c0000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawBalance_re_ent40()
PC address: 5765
Estimated Gas Usage: 7136 - 62080
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:418

userBalance_re_ent40[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x94000000007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xa00820000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdrawFunds_re_ent17(uint256)
PC address: 7438
Estimated Gas Usage: 8035 - 62696
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:240

msg.sender.call.value(_weiToWithdraw)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x420010000000400a3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x440100000052b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawFunds_re_ent17(uint256)
PC address: 7574
Estimated Gas Usage: 8035 - 62696
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:242

balances_re_ent17[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0008040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawFunds_re_ent17(uint256)
PC address: 7581
Estimated Gas Usage: 8035 - 62696
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:242

balances_re_ent17[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0008040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdrawBalance_re_ent26()
PC address: 7735
Estimated Gas Usage: 7092 - 62036
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:80

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x208180a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2371252e0085, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawBalance_re_ent26()
PC address: 7870
Estimated Gas Usage: 7092 - 62036
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:84

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x188, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100040000009809d, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdraw_balances_re_ent8()
PC address: 8772
Estimated Gas Usage: 7094 - 62038
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:337

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x18080000028580, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100080000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdraw_balances_re_ent8()
PC address: 8903
Estimated Gas Usage: 7094 - 62038
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:339

balances_re_ent8[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000042020010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdrawFunds_re_ent3(uint256)
PC address: 9210
Estimated Gas Usage: 8064 - 63008
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:42

msg.sender.call.value(_weiToWithdraw)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawFunds_re_ent3(uint256)
PC address: 9346
Estimated Gas Usage: 8064 - 63008
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:44

balances_re_ent3[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000000001022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawFunds_re_ent3(uint256)
PC address: 9353
Estimated Gas Usage: 8064 - 63008
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:44

balances_re_ent3[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000000001022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: buyTicket_re_ent9()
PC address: 10218
Estimated Gas Usage: 13725 - 88949
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:53

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: buyTicket_re_ent9()
PC address: 10271
Estimated Gas Usage: 13725 - 88949
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:53

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: buyTicket_re_ent9()
PC address: 10278
Estimated Gas Usage: 13725 - 88949
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:54

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdrawBalance_re_ent33()
PC address: 10393
Estimated Gas Usage: 7091 - 62035
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:432

msg.sender.call.value(userBalance_re_ent33[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40840000d00000024, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1c00000800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdrawBalance_re_ent33()
PC address: 10528
Estimated Gas Usage: 7091 - 62035
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:436

userBalance_re_ent33[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4004022204200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForTheBlockchain
Function name: withdraw_balances_re_ent1()
PC address: 11879
Estimated Gas Usage: 7115 - 62059
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:201

msg.sender.call.value(balances_re_ent1[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c100002010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x840000000000840, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForTheBlockchain
Function name: withdraw_balances_re_ent1()
PC address: 12010
Estimated Gas Usage: 7115 - 62059
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: tool_results/Mythril/analyzed_buggy_contracts/Re-entrancy/buggy_11.sol:203

balances_re_ent1[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x4080002000012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5c2e304149, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0


